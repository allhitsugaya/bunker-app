import { NextResponse } from 'next/server';
import { dbApi } from '@/app/_data/lib/db';

export const runtime = 'nodejs';

const json = (data, init) => NextResponse.json(data, init);

// POST - –±—ã—Å—Ç—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è
export async function POST(req) {
  const adminKey = req.headers.get('x-admin-key');

  try {
    if (!adminKey || adminKey !== process.env.ADMIN_KEY) {
      return json({ error: 'unauthorized' }, { status: 401 });
    }

    const body = await req.json();
    const { eventType, targetId = null } = body;

    const quickEvents = {
      food_found: {
        title: 'üéÅ –ù–ê–•–û–î–ö–ê –ü–†–û–î–û–í–û–õ–¨–°–¢–í–ò–Ø',
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫–ª–∞–¥ —Å –∫–æ–Ω—Å–µ—Ä–≤–∞–º–∏! –ó–∞–ø–∞—Å—ã –µ–¥—ã —É–≤–µ–ª–∏—á–µ–Ω—ã.',
        type: 'resource',
        severity: 'low',
        duration: 3
      },
      medicine_discovery: {
        title: 'üíä –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –ü–†–ò–ü–ê–°–´',
        description: '–ù–∞–π–¥–µ–Ω–∞ –∞–ø—Ç–µ—á–∫–∞ —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏. –ó–¥–æ—Ä–æ–≤—å–µ –∫–æ–º–∞–Ω–¥—ã —É–ª—É—á—à–µ–Ω–æ.',
        type: 'resource',
        severity: 'medium',
        duration: 3
      },
      equipment_found: {
        title: 'üîß –ü–û–õ–ï–ó–ù–û–ï –û–ë–û–†–£–î–û–í–ê–ù–ò–ï',
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—É–Ω–∫–µ—Ä–∞.',
        type: 'resource',
        severity: 'medium',
        duration: 3
      },
      external_contact: {
        title: 'ü§ù –í–ù–ï–®–ù–ò–ô –ö–û–ù–¢–ê–ö–¢',
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—Ä—É–≥–∏–µ –≤—ã–∂–∏–≤—à–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å.',
        type: 'social',
        severity: 'medium',
        duration: 5
      }
    };

    const quickEvent = quickEvents[eventType];
    if (!quickEvent) {
      return json({ error: 'invalid_event_type' }, { status: 400 });
    }

    const event = {
      id: Math.random().toString(36).substr(2, 9),
      type: quickEvent.type,
      title: quickEvent.title,
      description: quickEvent.description,
      duration: quickEvent.duration,
      effects: [],
      target: targetId ? 'player' : 'all',
      targetId: targetId || null,
      severity: quickEvent.severity,
      data: {
        eventType,
        isQuickEvent: true
      },
      createdAt: new Date().toISOString(),
      expiresAt: new Date(Date.now() + quickEvent.duration * 60000).toISOString(),
      isActive: true
    };

    await dbApi.createEvent(event);

    return json({ success: true, event });
  } catch (e) {
    console.error('[events/quick.POST] 500:', e);
    return json({ error: 'internal' }, { status: 500 });
  }
}