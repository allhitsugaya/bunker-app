import { NextResponse } from 'next/server';
import { dbApi } from '@/app/_data/lib/db';

export const runtime = 'nodejs';

const json = (data, init) => NextResponse.json(data, init);

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–∑–∏—Å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
export async function POST(req) {
  const adminKey = req.headers.get('x-admin-key');

  try {
    if (!adminKey || adminKey !== process.env.ADMIN_KEY) {
      return json({ error: 'unauthorized' }, { status: 401 });
    }

    const body = await req.json();
    const { crisisType, intensity = 'medium', duration = 10 } = body;

    const crises = {
      radiation: {
        title: '‚ò¢Ô∏è –†–ê–î–ò–ê–¶–ò–û–ù–ù–ê–Ø –£–ì–†–û–ó–ê',
        description: '–£—Ä–æ–≤–µ–Ω—å —Ä–∞–¥–∏–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—ã—à–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫—Ä—ã—Ç–∏–µ. –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç -20% –∫ –∑–¥–æ—Ä–æ–≤—å—é.',
        effects: ['health_decrease', 'movement_restricted'],
        icon: '‚ò¢Ô∏è'
      },
      system_failure: {
        title: 'üõ†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–õ–û–ú–ö–ê',
        description: '–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –±—É–Ω–∫–µ—Ä–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç! –†–µ—Å—É—Ä—Å—ã —Ç—Ä–∞—Ç—è—Ç—Å—è –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ.',
        effects: ['resource_decay', 'ability_disabled'],
        icon: 'üõ†Ô∏è'
      },
      mutant_attack: {
        title: 'üëπ –ê–¢–ê–ö–ê –ú–£–¢–ê–ù–¢–û–í',
        description: '–ú—É—Ç–∞–Ω—Ç—ã –∞—Ç–∞–∫—É—é—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä! –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –æ–±–æ—Ä–æ–Ω–µ. –®–∞–Ω—Å –ø–æ—Ç–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω.',
        effects: ['combat_required', 'resource_loss'],
        icon: 'üëπ'
      },
      mental_breakdown: {
        title: 'üß† –ü–°–ò–•–ò–ß–ï–°–ö–ò–ô –ö–†–ò–ó–ò–°',
        description: '–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–∏–∫–∞! –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.',
        effects: ['psychology_decrease', 'vote_disabled'],
        icon: 'üß†'
      },
      resource_crisis: {
        title: 'üìâ –ö–†–ò–ó–ò–° –†–ï–°–£–†–°–û–í',
        description: '–ó–∞–ø–∞—Å—ã —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Å—è–∫–∞—é—Ç! –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã –ø–æ –ø–æ–∏—Å–∫—É –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.',
        effects: ['resource_emergency', 'scavenging_boost'],
        icon: 'üìâ'
      }
    };

    const crisis = crises[crisisType];
    if (!crisis) {
      return json({ error: 'invalid_crisis_type' }, { status: 400 });
    }

    const event = {
      id: Math.random().toString(36).substr(2, 9),
      type: 'crisis',
      title: crisis.title,
      description: crisis.description,
      duration,
      effects: crisis.effects,
      target: 'all',
      severity: intensity,
      crisisType,
      data: {
        icon: crisis.icon,
        intensity
      },
      createdAt: new Date().toISOString(),
      expiresAt: new Date(Date.now() + duration * 60000).toISOString(),
      isActive: true
    };

    await dbApi.createEvent(event);

    return json({ success: true, event });
  } catch (e) {
    console.error('[events/crisis.POST] 500:', e);
    return json({ error: 'internal' }, { status: 500 });
  }
}