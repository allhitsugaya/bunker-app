'use client';
import { useEffect, useMemo, useState } from 'react';

async function fetchJSON(url, opts) {
  const res = await fetch(url, opts);
  const ct = res.headers.get('content-type') || '';
  let data = null;
  try {
    data = ct.includes('application/json') ? await res.json() : null;
  } catch {
  }
  if (!res.ok) {
    const err = new Error(data?.error || data?.message || `HTTP ${res.status}`);
    err.status = res.status;
    throw err;
  }
  return data ?? {};
}

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
function FuelGameClient({ playerName, playerId }) {
  const [gameActive, setGameActive] = useState(false);
  const [gameInfo, setGameInfo] = useState(null);
  const [userGuess, setUserGuess] = useState('');
  const [guesses, setGuesses] = useState([]);
  const [message, setMessage] = useState('');
  const [remainingAttempts, setRemainingAttempts] = useState(0);
  const [usedAttempts, setUsedAttempts] = useState(0);
  const [loading, setLoading] = useState(false);
  const [lastCheck, setLastCheck] = useState(0);

  const checkGameStatus = async () => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const now = Date.now();
    if (now - lastCheck < 2000) return; // –ù–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 —Å–µ–∫—É–Ω–¥—ã

    try {
      setLoading(true);
      setLastCheck(now);

      const response = await fetch('/api/game/guess');

      if (response.ok) {
        const data = await response.json();
        setGameActive(true);
        setGameInfo(data.game);
        setGuesses(data.guesses || []);

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        const playerGuesses = data.guesses.filter(g => g.playerId === playerId);
        setUsedAttempts(playerGuesses.length);
        setRemainingAttempts(data.game.attempts - playerGuesses.length);
        setMessage('');

      } else {
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ (400 –æ—à–∏–±–∫–∞), —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
        const errorData = await response.json();
        if (errorData.code === 'GAME_NOT_ACTIVE') {
          setGameActive(false);
          setGameInfo(null);
          setGuesses([]);
          setUsedAttempts(0);
          setRemainingAttempts(0);
          setMessage('');
        } else {
          setMessage(`–û—à–∏–±–∫–∞: ${errorData.error}`);
        }
      }
    } catch (error) {
      console.error('Error checking game status:', error);
      setGameActive(false);
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    } finally {
      setLoading(false);
    }
  };

  const submitGuess = async (e) => {
    e.preventDefault();

    if (!userGuess || remainingAttempts <= 0 || !gameActive) return;

    try {
      setLoading(true);
      const response = await fetch('/api/game/guess', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          playerName,
          playerId,
          guess: parseInt(userGuess)
        })
      });

      const data = await response.json();

      if (response.ok) {
        setUserGuess('');
        setMessage(
          data.guess.isCorrect ?
            'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!' :
            `–ü–æ–ø—ã—Ç–∫–∞ ${data.guess.attemptNumber}: ${userGuess}. ${data.guess.hint === 'greater' ? '–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï' : '–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï'}`
        );

        setRemainingAttempts(data.remainingAttempts);
        setUsedAttempts(data.usedAttempts);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–≥–∞–¥–æ–∫ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
          checkGameStatus();
        }, 1000);

      } else {
        setMessage(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–≥–∞–¥–∫–∏');
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        checkGameStatus();
      }
    } catch (error) {
      setMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    checkGameStatus();

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    let interval;
    if (gameActive) {
      interval = setInterval(checkGameStatus, 5000); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    } else {
      interval = setInterval(checkGameStatus, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    }

    return () => clearInterval(interval);
  }, [gameActive, playerId]);

  // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  if (loading && !gameActive) {
    return (
      <div className="p-6 bg-gray-800 rounded-lg border border-gray-700 text-center">
        <div className="text-4xl mb-4">‚õΩ</div>
        <h3 className="text-xl font-bold text-green-400 mb-2">–†—É–ª–µ—Ç–∫–∞ —Ç–æ–ø–ª–∏–≤–∞</h3>
        <div className="flex justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-400"></div>
        </div>
        <p className="text-gray-400 mt-2">–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã...</p>
      </div>
    );
  }

  if (!gameActive) {
    return (
      <div className="p-6 bg-gray-800 rounded-lg border border-gray-700 text-center">
        <div className="text-4xl mb-4">‚õΩ</div>
        <h3 className="text-xl font-bold text-green-400 mb-2">–†—É–ª–µ—Ç–∫–∞ —Ç–æ–ø–ª–∏–≤–∞</h3>
        <p className="text-gray-400 mb-4">–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –≤–µ–¥—É—â–∏–º...</p>
        <div className="text-xs text-gray-500 mt-2">
          –ò–≥—Ä–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –≤–µ–¥—É—â–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-800 rounded-lg border border-emerald-700">
      <div className="text-center mb-6">
        <div className="text-4xl mb-2">‚õΩ</div>
        <h3 className="text-xl font-bold text-green-400 mb-2">–†—É–ª–µ—Ç–∫–∞ —Ç–æ–ø–ª–∏–≤–∞</h3>
        <p className="text-gray-300">–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç {gameInfo.range.min} –¥–æ {gameInfo.range.max}</p>
        <div className="flex justify-center gap-6 mt-3">
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-400">{usedAttempts}</div>
            <div className="text-xs text-gray-400">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-emerald-400">{remainingAttempts}</div>
            <div className="text-xs text-gray-400">–û—Å—Ç–∞–ª–æ—Å—å</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-400">{gameInfo.attempts}</div>
            <div className="text-xs text-gray-400">–í—Å–µ–≥–æ</div>
          </div>
        </div>
      </div>

      {remainingAttempts > 0 ? (
        <form onSubmit={submitGuess} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-green-300 mb-2">
              –í–∞—à–∞ –¥–æ–≥–∞–¥–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {usedAttempts + 1}):
            </label>
            <input
              type="number"
              min={gameInfo.range.min}
              max={gameInfo.range.max}
              value={userGuess}
              onChange={(e) => setUserGuess(e.target.value)}
              className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-emerald-500"
              placeholder={`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${gameInfo.range.min} –¥–æ ${gameInfo.range.max}`}
              required
              disabled={loading}
            />
          </div>
          <button
            type="submit"
            className="w-full py-3 bg-emerald-600 hover:bg-emerald-700 text-white font-bold rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            disabled={!userGuess || loading}
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                –û—Ç–ø—Ä–∞–≤–∫–∞...
              </>
            ) : (
              `üéØ –°–¥–µ–ª–∞—Ç—å –¥–æ–≥–∞–¥–∫—É (${remainingAttempts} –æ—Å—Ç–∞–ª–æ—Å—å)`
            )}
          </button>
        </form>
      ) : (
        <div className="text-center p-4 bg-gray-700 rounded-lg">
          <div className="text-lg font-semibold text-amber-400 mb-2">
            –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {gameInfo.attempts} –ø–æ–ø—ã—Ç–æ–∫!
          </div>
          <p className="text-sm text-gray-400">–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã</p>
        </div>
      )}

      {message && (
        <div className={`mt-4 p-3 rounded-lg text-center ${
          message.includes('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º') ? 'bg-emerald-900/30 border border-emerald-500' :
            message.includes('–û—à–∏–±–∫–∞') ? 'bg-red-900/30 border border-red-500' :
              'bg-blue-900/30 border border-blue-500'
        }`}>
          <div className="font-semibold text-green-300">{message}</div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –¥–æ–≥–∞–¥–æ–∫ */}
      {guesses.length > 0 && (
        <div className="mt-6">
          <div className="flex justify-between items-center mb-3">
            <h4 className="font-semibold text-green-300">–í—Å–µ –¥–æ–≥–∞–¥–∫–∏:</h4>
            <button
              onClick={checkGameStatus}
              disabled={loading}
              className="text-xs text-gray-400 hover:text-gray-300 disabled:opacity-50"
            >
              {loading ? 'üîÑ' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
            </button>
          </div>
          <div className="space-y-2 max-h-60 overflow-y-auto">
            {guesses.map((guess) => (
              <div
                key={guess.id}
                className={`p-3 rounded-lg border ${
                  guess.isCorrect
                    ? 'border-emerald-500 bg-emerald-900/20'
                    : 'border-gray-600 bg-gray-700/30'
                } ${guess.playerId === playerId ? 'ring-2 ring-blue-500' : ''}`}
              >
                <div className="flex justify-between items-center">
                  <div className="flex items-center gap-2">
                    <span className={`font-medium ${
                      guess.playerId === playerId ? 'text-blue-400' : 'text-gray-300'
                    }`}>
                      {guess.playerName} {guess.playerId === playerId && '(–í—ã)'}
                    </span>
                    <span className="text-xs text-gray-400">#{guess.attemptNumber}</span>
                  </div>
                  <span className={`text-lg font-bold ${
                    guess.isCorrect ? 'text-emerald-400' : 'text-gray-400'
                  }`}>
                    {guess.guess}
                  </span>
                </div>
                {!guess.isCorrect && (
                  <div className="text-xs text-gray-400 mt-1">
                    {guess.hint === 'greater' ? '–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï' : '–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï'}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function FuelGuessGame({ isActive, onClose, adminKey, players }) {
  const [targetNumber, setTargetNumber] = useState(50);
  const [gameRange, setGameRange] = useState({ min: 1, max: 100 });
  const [gameAttempts, setGameAttempts] = useState(5);
  const [playerGuesses, setPlayerGuesses] = useState([]);
  const [gameStarted, setGameStarted] = useState(false);
  const [gameEnded, setGameEnded] = useState(false);

  const startGame = async () => {
    if (!adminKey) {
      alert('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }

    try {
      const gameResponse = await fetch('/api/game/guess', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          targetNumber,
          range: gameRange,
          attempts: gameAttempts
        })
      });

      if (!gameResponse.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã');
      }

      await fetchJSON('/api/events/global', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-key': adminKey
        },
        body: JSON.stringify({
          message: `üéÆ –†–£–õ–ï–¢–ö–ê –¢–û–ü–õ–ò–í–ê! –£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${gameRange.min} –¥–æ ${gameRange.max}. –ü–æ–ø—ã—Ç–æ–∫: ${gameAttempts}`,
          type: 'game_start',
          duration: 20,
          severity: 'high'
        })
      });

      setGameStarted(true);
      setGameEnded(false);
      setPlayerGuesses([]);

      alert('üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.');
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã');
    }
  };

  const endGame = async (winner = null) => {
    setGameEnded(true);

    try {
      if (winner) {
        const fuelAmount = Math.floor((gameRange.max - gameRange.min) / 10) + 10;
        await fetchJSON('/api/events/global', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-admin-key': adminKey
          },
          body: JSON.stringify({
            message: `üéâ ${winner.playerName} —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ ${targetNumber} –∏ –ø–æ–ª—É—á–∞–µ—Ç ${fuelAmount}–ª —Ç–æ–ø–ª–∏–≤–∞!`,
            type: 'game_win',
            duration: 15,
            severity: 'high'
          })
        });
        alert(`üéâ ${winner.playerName} –≤—ã–∏–≥—Ä–∞–ª ${fuelAmount}–ª —Ç–æ–ø–ª–∏–≤–∞!`);
      } else {
        await fetchJSON('/api/events/global', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-admin-key': adminKey
          },
          body: JSON.stringify({
            message: `üí• –†—É–ª–µ—Ç–∫–∞ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: ${targetNumber}`,
            type: 'game_lose',
            duration: 10,
            severity: 'medium'
          })
        });
        alert('üí• –ù–∏–∫—Ç–æ –Ω–µ —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ');
      }

      await fetch('/api/game/guess', { method: 'DELETE' });
    } catch (error) {
      console.error('End game error:', error);
    }
  };

  const resetGame = () => {
    setTargetNumber(50);
    setGameRange({ min: 1, max: 100 });
    setGameAttempts(5);
    setPlayerGuesses([]);
    setGameStarted(false);
    setGameEnded(false);
  };

  const loadPlayerGuesses = async () => {
    if (!isActive || !gameStarted || gameEnded) return;

    try {
      const response = await fetch('/api/game/guess');
      if (response.ok) {
        const data = await response.json();
        setPlayerGuesses(data.guesses || []);

        const winner = data.guesses.find(g => g.isCorrect);
        if (winner) {
          endGame(winner);
        } else if (data.guesses.length >= gameAttempts) {
          endGame();
        }
      }
    } catch (error) {
      console.error('Error loading guesses:', error);
    }
  };

  useEffect(() => {
    if (!isActive || !gameStarted || gameEnded) return;

    const interval = setInterval(loadPlayerGuesses, 2000);
    return () => clearInterval(interval);
  }, [isActive, gameStarted, gameEnded]);

  if (!isActive) return null;

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div
        className="bg-gradient-to-br from-gray-900 to-gray-800 border-2 border-emerald-500 rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6 border-b border-emerald-700/50">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold text-green-400 flex items-center gap-3">
              ‚õΩ –†—É–ª–µ—Ç–∫–∞ —Ç–æ–ø–ª–∏–≤–∞
            </h2>
            <button
              onClick={() => {
                resetGame();
                onClose();
              }}
              className="p-2 hover:bg-red-500/20 rounded-lg transition-colors text-red-400"
            >
              ‚úï
            </button>
          </div>
          <p className="text-green-200/60 mt-2">–ò–≥—Ä–æ–∫–∏ –ø—ã—Ç–∞—é—Ç—Å—è —É–≥–∞–¥–∞—Ç—å –≤–∞—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ</p>
        </div>

        <div className="p-6 space-y-6">
          {!gameStarted ? (
            <div className="space-y-4">
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-semibold text-green-300 mb-2">–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ</label>
                  <input
                    type="number"
                    value={targetNumber}
                    onChange={(e) => setTargetNumber(parseInt(e.target.value))}
                    min={gameRange.min}
                    max={gameRange.max}
                    className="w-full px-4 py-2 rounded-lg bg-gray-800 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-semibold text-green-300 mb-2">–ü–æ–ø—ã—Ç–∫–∏ –∏–≥—Ä–æ–∫–æ–≤</label>
                  <select
                    value={gameAttempts}
                    onChange={(e) => setGameAttempts(parseInt(e.target.value))}
                    className="w-full px-4 py-2 rounded-lg bg-gray-800 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                  >
                    <option value={3}>3 (–°–ª–æ–∂–Ω–æ)</option>
                    <option value={5}>5 (–ù–æ—Ä–º–∞–ª—å–Ω–æ)</option>
                    <option value={8}>8 (–õ–µ–≥–∫–æ)</option>
                    <option value={10}>10 (–û—á–µ–Ω—å –ª–µ–≥–∫–æ)</option>
                  </select>
                </div>
              </div>

              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-semibold text-green-300 mb-2">–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ</label>
                  <input
                    type="number"
                    value={gameRange.min}
                    onChange={(e) => setGameRange(prev => ({ ...prev, min: parseInt(e.target.value) }))}
                    className="w-full px-4 py-2 rounded-lg bg-gray-800 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-semibold text-green-300 mb-2">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ</label>
                  <input
                    type="number"
                    value={gameRange.max}
                    onChange={(e) => setGameRange(prev => ({ ...prev, max: parseInt(e.target.value) }))}
                    className="w-full px-4 py-2 rounded-lg bg-gray-800 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                  />
                </div>
              </div>

              <div className="bg-amber-900/20 border border-amber-700/50 rounded-lg p-4">
                <div className="flex items-center gap-3 text-amber-300">
                  <span>üëÅÔ∏è</span>
                  <div className="text-sm">
                    <strong>–¢–æ–ª—å–∫–æ –≤—ã –≤–∏–¥–∏—Ç–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ:</strong>
                    <div className="text-2xl font-bold text-center my-2">{targetNumber}</div>
                    <div>–ò–≥—Ä–æ–∫–∏ —É–≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –¥–∏–∞–ø–∞–∑–æ–Ω: {gameRange.min}-{gameRange.max}</div>
                  </div>
                </div>
              </div>

              <button
                onClick={startGame}
                className="w-full py-3 bg-gradient-to-r from-emerald-500 to-green-500 text-gray-900 font-bold rounded-lg hover:from-emerald-400 hover:to-green-400 transition-all"
              >
                üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
              </button>
            </div>
          ) : !gameEnded ? (
            <div className="space-y-4">
              <div className="grid md:grid-cols-3 gap-4 text-center">
                <div className="p-3 rounded-lg bg-emerald-900/20 border border-emerald-700/30">
                  <div className="text-2xl font-bold text-emerald-400">{targetNumber}</div>
                  <div className="text-sm text-green-200/60">–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ</div>
                </div>
                <div className="p-3 rounded-lg bg-blue-900/20 border border-blue-700/30">
                  <div className="text-2xl font-bold text-blue-400">{playerGuesses.length}/{gameAttempts}</div>
                  <div className="text-sm text-green-200/60">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫</div>
                </div>
                <div className="p-3 rounded-lg bg-purple-900/20 border border-purple-700/30">
                  <div className="text-2xl font-bold text-purple-400">{gameRange.min}-{gameRange.max}</div>
                  <div className="text-sm text-green-200/60">–î–∏–∞–ø–∞–∑–æ–Ω</div>
                </div>
              </div>

              <div className="bg-gray-800/50 rounded-lg p-4">
                <h3 className="font-semibold text-green-300 mb-3">–î–æ–≥–∞–¥–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:</h3>
                {playerGuesses.length === 0 ? (
                  <div className="text-center py-4 text-green-200/40">‚åõ –û–∂–∏–¥–∞–µ–º –¥–æ–≥–∞–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤...</div>
                ) : (
                  <div className="space-y-2 max-h-60 overflow-y-auto">
                    {playerGuesses.map((guess) => (
                      <div
                        key={guess.id}
                        className={`p-3 rounded-lg border ${
                          guess.isCorrect
                            ? 'border-emerald-500 bg-emerald-900/20'
                            : 'border-gray-600 bg-gray-900/30'
                        }`}
                      >
                        <div className="flex justify-between items-center">
                          <span className="font-semibold text-green-300">{guess.playerName}</span>
                          <span className={`text-lg font-bold ${
                            guess.isCorrect ? 'text-emerald-400' : 'text-gray-400'
                          }`}>
                            {guess.guess}
                          </span>
                        </div>
                        <div className="text-sm text-green-200/60 mt-1">
                          {guess.hint === 'greater' ? 'üìà –ë–æ–ª—å—à–µ' : guess.hint === 'less' ? 'üìâ –ú–µ–Ω—å—à–µ' : 'üéØ –£–ì–ê–î–ê–õ!'}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              <button
                onClick={() => endGame()}
                className="w-full py-2 bg-gradient-to-r from-red-600 to-orange-600 text-white font-bold rounded-lg hover:from-red-500 hover:to-orange-500 transition-all"
              >
                ‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ
              </button>
            </div>
          ) : (
            <div className="text-center space-y-4">
              <div className={`text-4xl ${playerGuesses.some(g => g.isCorrect) ? 'text-emerald-400' : 'text-red-400'}`}>
                {playerGuesses.some(g => g.isCorrect) ? 'üéâ –ü–û–ë–ï–î–ê!' : 'üí• –ü–†–û–ò–ì–†–´–®'}
              </div>

              <div className="text-lg text-green-300">
                {playerGuesses.some(g => g.isCorrect)
                  ? `–ò–≥—Ä–æ–∫ ${playerGuesses.find(g => g.isCorrect)?.playerName} —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ!`
                  : '–ù–∏–∫—Ç–æ –Ω–µ —É–≥–∞–¥–∞–ª –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ'
                }
              </div>

              <div className="bg-gray-800/50 rounded-lg p-4">
                <div className="font-semibold text-green-300 mb-2">–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ:</div>
                <div className="text-3xl font-bold text-emerald-400">{targetNumber}</div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={resetGame}
                  className="flex-1 py-3 bg-gradient-to-r from-emerald-500 to-green-500 text-gray-900 font-bold rounded-lg hover:from-emerald-400 hover:to-green-400 transition-all"
                >
                  üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞
                </button>
                <button
                  onClick={onClose}
                  className="flex-1 py-3 bg-gray-700 text-green-300 font-bold rounded-lg hover:bg-gray-600 transition-all"
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default function AdminPanel() {
  const [adminKey, setAdminKey] = useState('');
  const [players, setPlayers] = useState([]);
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState('players');
  const [activeEvents, setActiveEvents] = useState([]);
  const [fuelGameActive, setFuelGameActive] = useState(false);
  const [targetNumber, setTargetNumber] = useState(50);
  const [gameRange, setGameRange] = useState({ min: 1, max: 100 });
  const [gameAttempts, setGameAttempts] = useState(5);
  const [playerGuesses, setPlayerGuesses] = useState([]);
  const [gameStarted, setGameStarted] = useState(false);
  const [gameEnded, setGameEnded] = useState(false);

  const [poll, setPoll] = useState(null);
  const [counts, setCounts] = useState({});
  const [last, setLast] = useState(null);

  const [question, setQuestion] = useState('–ö–æ–≥–æ –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –±—É–Ω–∫–µ—Ä–∞?');
  const [mode, setMode] = useState('players');
  const [customOptions, setCustomOptions] = useState('');

  const [eventMessage, setEventMessage] = useState('');
  const [resourceModifier, setResourceModifier] = useState(0);
  const [selectedScenario, setSelectedScenario] = useState('');
  const [gamePhase, setGamePhase] = useState('preparation');
  const [selectedCrisis, setSelectedCrisis] = useState('radiation');
  const [crisisIntensity, setCrisisIntensity] = useState('medium');

  // ===== –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====
  async function loadPlayers() {
    if (!adminKey) return;
    setError('');
    try {
      const data = await fetchJSON('/api/state', { headers: { 'x-admin-key': adminKey } });
      setPlayers(data.players || []);
    } catch (e) {
      if (e.status === 401) setError('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –≤–µ–¥—É—â–µ–≥–æ');
      else setError('‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤');
      setPlayers([]);
    }
  }

  async function loadPoll() {
    try {
      const data = await fetchJSON('/api/polls/state');
      setPoll(data.poll || null);
      setCounts(data.counts || {});
      setLast(data.last || null);
    } catch {
      setPoll(null);
      setCounts({});
      setLast(null);
    }
  }

  async function loadEvents() {
    try {
      const data = await fetchJSON('/api/events');
      setActiveEvents(data.events || []);
    } catch {
      setActiveEvents([]);
    }
  }

  useEffect(() => {
    if (!adminKey) return;
    const tick = async () => {
      await Promise.allSettled([loadPlayers(), loadPoll(), loadEvents()]);
    };
    tick();
    const t = setInterval(tick, 2500);
    return () => clearInterval(t);
  }, [adminKey]);

  // ===== –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è =====
  async function toggleReveal(id) {
    await fetch('/api/admin/reveal', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ targetId: id })
    });
    loadPlayers();
  }

  async function toggleExclude(id) {
    await fetch('/api/admin/exclude', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ targetId: id })
    });
    loadPlayers();
  }

  async function deletePlayer(id) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?')) return;
    await fetch('/api/admin/delete-player', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ targetId: id })
    });
    loadPlayers();
  }

  async function wipeAll() {
    if (!confirm('‚ö† –°—Ç–µ—Ä–µ—Ç—å –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?')) return;
    await fetch('/api/admin/wipe', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey }
    });
    await Promise.allSettled([loadPlayers(), loadPoll(), loadEvents()]);
  }

  // ===== –†–ï–ê–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–ë–´–¢–ò–ô =====
  async function sendGlobalEvent() {
    if (!eventMessage.trim()) return;

    try {
      await fetchJSON('/api/events/global', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-key': adminKey
        },
        body: JSON.stringify({
          message: eventMessage,
          type: 'info',
          duration: 10
        })
      });

      alert(`üì¢ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: "${eventMessage}"`);
      setEventMessage('');
      loadEvents();
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è');
    }
  }

  async function triggerCrisis(crisisType = selectedCrisis, intensity = crisisIntensity) {
    try {
      await fetchJSON('/api/events/crisis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-key': adminKey
        },
        body: JSON.stringify({
          crisisType,
          intensity,
          duration: 15
        })
      });

      alert(`üî• –ö—Ä–∏–∑–∏—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${getCrisisName(crisisType)}`);
      loadEvents();
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—Ä–∏–∑–∏—Å–∞');
    }
  }

  async function modifyResources() {
    if (resourceModifier === 0) {
      alert('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞');
      return;
    }

    try {
      await fetchJSON('/api/events/resources', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-key': adminKey
        },
        body: JSON.stringify({
          modifier: resourceModifier,
          resourceType: 'all',
          reason: resourceModifier > 0 ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤' : '–ü–æ—Ç–µ—Ä–∏ —Ä–µ—Å—É—Ä—Å–æ–≤'
        })
      });

      alert(`üì¶ –†–µ—Å—É—Ä—Å—ã –∏–∑–º–µ–Ω–µ–Ω—ã: ${resourceModifier > 0 ? '+' : ''}${resourceModifier}%`);
      setResourceModifier(0);
      loadEvents();
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤');
    }
  }

  async function triggerQuickEvent(eventType) {
    try {
      await fetchJSON('/api/events/quick', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-key': adminKey
        },
        body: JSON.stringify({ eventType })
      });

      alert(`‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${getQuickEventName(eventType)}`);
      loadEvents();
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è');
    }
  }

  async function deleteEvent(eventId) {
    try {
      await fetchJSON(`/api/events?id=${eventId}`, {
        method: 'DELETE',
        headers: { 'x-admin-key': adminKey }
      });

      alert('‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
      loadEvents();
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è');
    }
  }

  async function changeGamePhase(phase) {
    setGamePhase(phase);
    try {
      await fetchJSON('/api/events', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-key': adminKey
        },
        body: JSON.stringify({
          type: 'phase_change',
          title: 'üîÑ –°–ú–ï–ù–ê –§–ê–ó–´ –ò–ì–†–´',
          description: `–§–∞–∑–∞ –∏–≥—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${getPhaseName(phase)}`,
          duration: 5,
          target: 'all',
          severity: 'info'
        })
      });

      alert(`üîÑ –§–∞–∑–∞ –∏–≥—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${getPhaseName(phase)}`);
      loadEvents();
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∑—ã');
    }
  }

  async function assignScenario() {
    if (!selectedScenario) return;

    try {
      await fetchJSON('/api/events', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-key': adminKey
        },
        body: JSON.stringify({
          type: 'scenario_change',
          title: 'üé≠ –°–ú–ï–ù–ê –°–¶–ï–ù–ê–†–ò–Ø',
          description: `–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${getScenarioName(selectedScenario)}`,
          duration: 10,
          target: 'all',
          severity: 'info'
        })
      });

      alert(`üé≠ –°—Ü–µ–Ω–∞—Ä–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${getScenarioName(selectedScenario)}`);
      loadEvents();
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è');
    }
  }

  // ===== –ì–û–õ–û–°–û–í–ê–ù–ò–ï =====
  async function startPoll() {
    if (!adminKey) return alert('–í–≤–µ–¥–∏—Ç–µ ADMIN_KEY');

    let candidates = [];
    if (mode === 'players') {
      candidates = players.filter(p => !p.excluded).map(p => p.id);
    } else {
      alert('–†–µ–∂–∏–º "–°–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã" –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω');
      return;
    }

    if (candidates.length === 0) {
      alert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
      return;
    }

    try {
      await fetchJSON('/api/polls/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
        body: JSON.stringify({ candidates, question })
      });
      await loadPoll();
      alert('üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!');
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
    }
  }

  async function closePoll() {
    if (!adminKey) return alert('–í–≤–µ–¥–∏—Ç–µ ADMIN_KEY');
    try {
      await fetchJSON('/api/polls/close', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
        body: JSON.stringify({ policy: 'most' })
      });
      await loadPoll();
      alert('‚èπ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const getPhaseName = (phase) => {
    const phases = {
      preparation: 'üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
      active: 'üéÆ –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞',
      crisis: 'üî• –ö—Ä–∏–∑–∏—Å',
      resolution: 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ'
    };
    return phases[phase] || phase;
  };

  const getCrisisName = (crisis) => {
    const crises = {
      radiation: '‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞',
      system_failure: 'üõ†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ª–æ–º–∫–∞',
      mutant_attack: 'üëπ –ê—Ç–∞–∫–∞ –º—É—Ç–∞–Ω—Ç–æ–≤',
      mental_breakdown: 'üß† –ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å',
      resource_crisis: 'üìâ –ö—Ä–∏–∑–∏—Å —Ä–µ—Å—É—Ä—Å–æ–≤'
    };
    return crises[crisis] || crisis;
  };

  const getQuickEventName = (eventType) => {
    const events = {
      food_found: 'üéÅ –ù–∞—Ö–æ–¥–∫–∞ –ø—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è',
      medicine_discovery: 'üíä –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–ø–∞—Å—ã',
      equipment_found: 'üîß –ü–æ–ª–µ–∑–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
      external_contact: 'ü§ù –í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç'
    };
    return events[eventType] || eventType;
  };

  const getScenarioName = (scenario) => {
    const scenarios = {
      bunker: '–ü—É–±–µ—Ä—Ç–∞—Ç AVANTEüö∫',
      nomad: 'üöå –ë—Ä–æ–Ω–µ–∞–≤—Ç–æ–±—É—Å "–ù–æ–º–∞–¥"',
      station: 'üõ∞üëßüèª –ñ–ï–ù–©–ò–ù–ê-–ë–û–ì–û–ú–û–õ',
      submarine: 'ü•Ç –û–ë–õ–û–ñ–ï–ù–ò–ï –†–ï–ó–ù–û–í–ê'
    };
    return scenarios[scenario] || scenario;
  };

  const getEventSeverityColor = (severity) => {
    const colors = {
      low: 'text-green-400',
      medium: 'text-yellow-400',
      high: 'text-orange-400',
      critical: 'text-red-400',
      info: 'text-blue-400'
    };
    return colors[severity] || 'text-green-400';
  };

  const totalVotes = useMemo(
    () => Object.values(counts).reduce((s, n) => s + n, 0),
    [counts]
  );

  const nameById = (id) => players.find(p => p.id === id)?.name || id;

  // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const StatCard = ({ title, value, icon, color = 'emerald' }) => (
    <div className={`p-4 rounded-xl border border-${color}-800/40 bg-gray-900/50 backdrop-blur-sm`}>
      <div className="flex items-center gap-3">
        <div className="text-2xl">{icon}</div>
        <div>
          <div className="text-sm text-green-200/60">{title}</div>
          <div className="text-xl font-bold text-green-400">{value}</div>
        </div>
      </div>
    </div>
  );

  const ActionButton = ({ onClick, children, variant = 'primary', icon, disabled = false, size = 'medium' }) => {
    const variants = {
      primary: 'bg-gradient-to-r from-emerald-500 to-green-500 text-gray-900 hover:from-emerald-400 hover:to-green-400',
      secondary: 'bg-gray-800 text-green-300 border border-emerald-700 hover:bg-gray-700 hover:border-emerald-600',
      danger: 'bg-gradient-to-r from-red-600 to-orange-600 text-white hover:from-red-500 hover:to-orange-500',
      warning: 'bg-gradient-to-r from-yellow-600 to-amber-600 text-white hover:from-yellow-500 hover:to-amber-500'
    };

    const sizes = {
      small: 'px-3 py-1.5 text-sm',
      medium: 'px-4 py-2 text-sm',
      large: 'px-6 py-3 text-base'
    };

    return (
      <button
        onClick={onClick}
        disabled={disabled}
        className={`flex items-center gap-2 rounded-lg font-semibold transition-all duration-200 active:scale-95 ${
          variants[variant]
        } ${sizes[size]} ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}
      >
        {icon && <span>{icon}</span>}
        {children}
      </button>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-950 text-green-300 p-4 font-mono">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4">
          <div>
            <h1
              className="text-3xl font-bold bg-gradient-to-r from-emerald-400 to-green-400 bg-clip-text text-transparent">
              üéÆ –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –±—É–Ω–∫–µ—Ä–∞
            </h1>
            <p className="text-green-200/60 mt-1">–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π</p>
          </div>

          <div className="grid grid-cols-2 lg:grid-cols-4 gap-3">
            <StatCard title="–ò–≥—Ä–æ–∫–æ–≤" value={players.length} icon="üë•" />
            <StatCard title="–ê–∫—Ç–∏–≤–Ω—ã—Ö" value={players.filter(p => !p.excluded).length} icon="üéØ" />
            <StatCard title="–°–æ–±—ã—Ç–∏–π" value={activeEvents.length} icon="üì¢" color="blue" />
            <StatCard title="–§–∞–∑–∞" value={getPhaseName(gamePhase)} icon="üîÑ" color="purple" />
          </div>
        </div>

        {/* –ü–∞–Ω–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
        <div className="rounded-2xl border border-emerald-800/40 bg-gray-900/80 backdrop-blur-sm p-6">
          <div className="flex flex-col lg:flex-row gap-4 items-center">
            <input
              type="password"
              placeholder="üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
              className="flex-1 px-4 py-3 rounded-xl bg-gray-800 border border-emerald-700 text-green-300 placeholder-green-700 focus:outline-none focus:border-emerald-500 transition-colors"
              value={adminKey}
              onChange={(e) => setAdminKey(e.target.value)}
            />
            <div className="flex gap-3">
              <ActionButton onClick={loadPlayers} icon="üîÑ">–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</ActionButton>
              <ActionButton onClick={wipeAll} variant="danger" icon="üß®">–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</ActionButton>
            </div>
          </div>
          {error && <div className="mt-3 p-3 rounded-lg bg-red-900/30 border border-red-700 text-red-300">{error}</div>}
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex flex-wrap gap-2 border-b border-emerald-800/40 pb-2">
          {[
            { id: 'players', name: 'üë• –ò–≥—Ä–æ–∫–∏', icon: 'üë•' },
            { id: 'voting', name: 'üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', icon: 'üó≥' },
            { id: 'events', name: 'üì¢ –°–æ–±—ã—Ç–∏—è', icon: 'üì¢' },
            { id: 'scenarios', name: 'üé≠ –°—Ü–µ–Ω–∞—Ä–∏–∏', icon: 'üé≠' },
            { id: 'resources', name: 'üì¶ –†–µ—Å—É—Ä—Å—ã', icon: 'üì¶' },
            { id: 'minigames', name: 'üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã', icon: 'üéÆ' }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-all duration-200 ${
                activeTab === tab.id
                  ? 'bg-emerald-500 text-gray-900 font-bold'
                  : 'bg-gray-800 text-green-300 hover:bg-gray-700'
              }`}
            >
              <span>{tab.icon}</span>
              <span>{tab.name}</span>
            </button>
          ))}
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
        <div className="rounded-2xl border border-emerald-800/40 bg-gray-900/80 backdrop-blur-sm p-6">
          {/* –í–∫–ª–∞–¥–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ */}
          {activeTab === 'players' && (
            <div className="space-y-4">
              <h2 className="text-2xl font-bold text-green-400 mb-4">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏</h2>
              <div className="grid gap-4">
                {players.map((player) => (
                  <div
                    key={player.id}
                    className={`p-5 rounded-xl border-2 backdrop-blur-sm transition-all duration-300 ${
                      player.excluded
                        ? 'border-red-500/50 bg-red-900/20'
                        : 'border-emerald-700/50 bg-gray-800/30 hover:border-emerald-500/70'
                    }`}
                  >
                    <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className="text-xl font-bold text-green-300">{player.name}</h3>
                          {player.excluded && (
                            <span className="px-2 py-1 bg-red-500 text-white text-xs rounded-full font-bold">
                              üö´ –ò–°–ö–õ–Æ–ß–Å–ù
                            </span>
                          )}
                          {player.id === players[0]?.id && (
                            <span className="px-2 py-1 bg-yellow-500 text-gray-900 text-xs rounded-full font-bold">
                              üëë –õ–ò–î–ï–†
                            </span>
                          )}
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 text-sm">
                          <div><span className="text-green-200/60">–í–æ–∑—Ä–∞—Å—Ç:</span> {player.age || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–ü–æ–ª:</span> {player.gender || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–†–∞—Å–∞:</span> {player.race || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</span> {player.profession || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–ó–¥–æ—Ä–æ–≤—å–µ:</span> {player.health || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–ü—Å–∏—Ö–∏–∫–∞:</span> {player.psychology || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–•–æ–±–±–∏:</span> {player.hobby || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–°—Ç—Ä–∞—Ö:</span> {player.fear || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–ß–µ—Ä—Ç–∞:</span> {player.trait || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</span> {player.ability || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–°–µ–∫—Ä–µ—Ç:</span> {player.secret || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–ü—Ä–µ–¥–º–µ—Ç:</span> {player.item || '‚Äî'}</div>
                          <div><span className="text-green-200/60">–û—Ç–Ω–æ—à–µ–Ω–∏–µ:</span> {player.relationship || '‚Äî'}</div>
                        </div>
                      </div>

                      <div className="flex flex-wrap gap-2">
                        <ActionButton onClick={() => toggleReveal(player.id)} variant="secondary" icon="üîì" size="small">
                          –†–∞—Å–∫—Ä—ã—Ç—å
                        </ActionButton>
                        <ActionButton onClick={() => toggleExclude(player.id)}
                                      variant={player.excluded ? 'warning' : 'danger'}
                                      icon={player.excluded ? '‚Ü©Ô∏è' : 'üö´'} size="small">
                          {player.excluded ? '–í–µ—Ä–Ω—É—Ç—å' : '–ò—Å–∫–ª—é—á–∏—Ç—å'}
                        </ActionButton>
                        <ActionButton onClick={() => deletePlayer(player.id)} variant="danger" icon="üóëÔ∏è" size="small">
                          –£–¥–∞–ª–∏—Ç—å
                        </ActionButton>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {players.length === 0 && !error && (
                <div className="text-center py-12 text-green-200/40">
                  <div className="text-6xl mb-4">üë•</div>
                  <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö</div>
                  <div className="text-sm mt-2">–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ</div>
                </div>
              )}
            </div>
          )}

          {/* –í–∫–ª–∞–¥–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è */}
          {activeTab === 'voting' && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-green-400">üó≥ –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</h2>
              {poll && (
                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                  <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4 mb-6">
                    <div>
                      <h3 className="text-lg font-bold text-green-300 mb-1">–ê–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</h3>
                      <p className="text-green-200/60">–í–æ–ø—Ä–æ—Å: {poll.question}</p>
                    </div>
                    <ActionButton onClick={closePoll} variant="danger" icon="‚èπÔ∏è">–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</ActionButton>
                  </div>

                  <div className="grid lg:grid-cols-2 gap-6">
                    <div className="space-y-3">
                      <h4 className="font-semibold text-green-300">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã</h4>
                      {poll.candidates?.map((id) => {
                        const votes = counts[id] || 0;
                        const pct = totalVotes > 0 ? Math.round((votes / totalVotes) * 100) : 0;
                        const player = players.find(p => p.id === id);

                        return (
                          <div key={id} className="p-3 rounded-lg border border-emerald-800/30 bg-gray-900/50">
                            <div className="flex justify-between items-center mb-2">
                              <span className="font-semibold text-green-300">
                                {player?.name || id}
                                {player?.excluded && <span className="text-red-400 text-xs ml-2">[–ò–°–ö–õ–Æ–ß–Å–ù]</span>}
                              </span>
                              <span className="text-emerald-400 font-bold">{votes} –≥–æ–ª.</span>
                            </div>
                            <div className="w-full bg-gray-700 rounded-full h-2">
                              <div
                                className="bg-gradient-to-r from-emerald-400 to-green-400 h-2 rounded-full transition-all duration-500"
                                style={{ width: `${pct}%` }}
                              />
                            </div>
                            <div className="text-xs text-green-200/60 mt-1 text-right">{pct}%</div>
                          </div>
                        );
                      })}
                    </div>

                    <div className="space-y-4">
                      <div className="p-4 rounded-lg bg-emerald-900/20 border border-emerald-700/30 text-center">
                        <div className="text-3xl font-bold text-emerald-400">{totalVotes}</div>
                        <div className="text-green-200/60">–≤—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤</div>
                      </div>

                      <div>
                        <h5 className="font-semibold text-green-300 mb-3">–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</h5>
                        <div className="space-y-2">
                          {Object.entries(counts)
                            .sort(([, a], [, b]) => b - a)
                            .map(([id, count]) => (
                              <div key={id} className="flex justify-between items-center text-sm">
                                <span className="text-green-200/80">{nameById(id)}</span>
                                <span className="font-semibold text-green-400">{count}</span>
                              </div>
                            ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {!poll && (
                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                  <h3 className="text-lg font-bold text-green-300 mb-4">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</h3>
                  <div className="grid gap-4 max-w-2xl">
                    <div>
                      <label className="block text-sm font-semibold text-green-300 mb-2">–í–æ–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</label>
                      <input
                        type="text"
                        value={question}
                        onChange={(e) => setQuestion(e.target.value)}
                        className="w-full px-4 py-2 rounded-lg bg-gray-900 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                        placeholder="–ö–æ–≥–æ –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –±—É–Ω–∫–µ—Ä–∞?"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-semibold text-green-300 mb-2">–¢–∏–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</label>
                      <div className="flex gap-4">
                        <label className="flex items-center gap-2">
                          <input type="radio" checked={mode === 'players'} onChange={() => setMode('players')}
                                 className="text-emerald-500" />
                          <span>–ü–æ –∏–≥—Ä–æ–∫–∞–º</span>
                        </label>
                        <label className="flex items-center gap-2 opacity-60">
                          <input type="radio" checked={mode === 'custom'} onChange={() => setMode('custom')} disabled />
                          <span>–°–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Å–∫–æ—Ä–æ)</span>
                        </label>
                      </div>
                    </div>

                    <ActionButton onClick={startPoll} icon="üöÄ">–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</ActionButton>
                  </div>
                </div>
              )}

              {last && (
                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                  <h3 className="text-lg font-bold text-green-300 mb-3">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>
                  <p className="text-green-200">{last.summary || '‚Äî'}</p>
                </div>
              )}
            </div>
          )}

          {/* –í–∫–ª–∞–¥–∫–∞ —Å–æ–±—ã—Ç–∏–π */}
          {activeTab === 'events' && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-green-400">üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏</h2>

              {activeEvents.length > 0 && (
                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                  <h3 className="text-lg font-bold text-green-300 mb-4">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</h3>
                  <div className="space-y-3 max-h-96 overflow-y-auto">
                    {activeEvents.map((event) => (
                      <div key={event.id} className="p-4 rounded-lg border border-emerald-800/30 bg-gray-900/50">
                        <div className="flex justify-between items-start mb-2">
                          <div>
                            <h4 className={`font-bold ${getEventSeverityColor(event.severity)}`}>{event.title}</h4>
                            <p className="text-green-200/80 text-sm mt-1">{event.description}</p>
                          </div>
                          <ActionButton onClick={() => deleteEvent(event.id)} variant="danger" icon="üóëÔ∏è"
                                        size="small">–£–¥–∞–ª–∏—Ç—å</ActionButton>
                        </div>
                        <div className="flex justify-between text-xs text-green-200/60">
                          <span>–¢–∏–ø: {event.type}</span>
                          <span>–°–æ–∑–¥–∞–Ω–æ: {new Date(event.createdAt).toLocaleTimeString()}</span>
                          <span>–ò—Å—Ç–µ–∫–∞–µ—Ç: {new Date(event.expiresAt).toLocaleTimeString()}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div className="grid lg:grid-cols-2 gap-6">
                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                  <h3 className="text-lg font-bold text-green-300 mb-4">–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h3>
                  <div className="space-y-3">
                    <textarea
                      value={eventMessage}
                      onChange={(e) => setEventMessage(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤..."
                      className="w-full h-24 px-4 py-3 rounded-lg bg-gray-900 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500 resize-none"
                    />
                    <ActionButton onClick={sendGlobalEvent} icon="üì¢" disabled={!eventMessage.trim()}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å
                      —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</ActionButton>
                  </div>
                </div>

                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                  <h3 className="text-lg font-bold text-green-300 mb-4">–ö—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</h3>
                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-semibold text-green-300 mb-2">–¢–∏–ø –∫—Ä–∏–∑–∏—Å–∞</label>
                      <select
                        value={selectedCrisis}
                        onChange={(e) => setSelectedCrisis(e.target.value)}
                        className="w-full px-4 py-2 rounded-lg bg-gray-900 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                      >
                        <option value="radiation">‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞</option>
                        <option value="system_failure">üõ†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ª–æ–º–∫–∞</option>
                        <option value="mutant_attack">üëπ –ê—Ç–∞–∫–∞ –º—É—Ç–∞–Ω—Ç–æ–≤</option>
                        <option value="mental_breakdown">üß† –ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å</option>
                        <option value="resource_crisis">üìâ –ö—Ä–∏–∑–∏—Å —Ä–µ—Å—É—Ä—Å–æ–≤</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-semibold text-green-300 mb-2">–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å</label>
                      <select
                        value={crisisIntensity}
                        onChange={(e) => setCrisisIntensity(e.target.value)}
                        className="w-full px-4 py-2 rounded-lg bg-gray-900 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                      >
                        <option value="low">–ù–∏–∑–∫–∞—è</option>
                        <option value="medium">–°—Ä–µ–¥–Ω—è—è</option>
                        <option value="high">–í—ã—Å–æ–∫–∞—è</option>
                      </select>
                    </div>
                    <ActionButton onClick={() => triggerCrisis()} variant="warning" icon="üî•">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                      –∫—Ä–∏–∑–∏—Å</ActionButton>
                  </div>
                </div>
              </div>

              <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                <h3 className="text-lg font-bold text-green-300 mb-4">–ë—ã—Å—Ç—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {[
                    { type: 'food_found', name: 'üéÅ –ù–∞—Ö–æ–¥–∫–∞ –ø—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è', icon: 'üéÅ' },
                    { type: 'medicine_discovery', name: 'üíä –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–ø–∞—Å—ã', icon: 'üíä' },
                    { type: 'equipment_found', name: 'üîß –ü–æ–ª–µ–∑–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', icon: 'üîß' },
                    { type: 'external_contact', name: 'ü§ù –í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç', icon: 'ü§ù' }
                  ].map((event) => (
                    <button
                      key={event.type}
                      onClick={() => triggerQuickEvent(event.type)}
                      className="p-3 rounded-lg border border-emerald-700/30 bg-gray-900/50 hover:bg-emerald-900/20 hover:border-emerald-500 transition-all text-sm text-green-200 flex flex-col items-center gap-2"
                    >
                      <span className="text-lg">{event.icon}</span>
                      <span>{event.name}</span>
                    </button>
                  ))}
                </div>
              </div>

              <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                <h3 className="text-lg font-bold text-green-300 mb-4">–§–∞–∑—ã –∏–≥—Ä—ã</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {[
                    { id: 'preparation', name: 'üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞', color: 'blue' },
                    { id: 'active', name: 'üéÆ –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞', color: 'emerald' },
                    { id: 'crisis', name: 'üî• –ö—Ä–∏–∑–∏—Å', color: 'red' },
                    { id: 'resolution', name: 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ', color: 'purple' }
                  ].map(phase => (
                    <button
                      key={phase.id}
                      onClick={() => changeGamePhase(phase.id)}
                      className={`p-4 rounded-lg border-2 text-center transition-all ${
                        gamePhase === phase.id
                          ? 'border-emerald-500 bg-emerald-500/20 text-emerald-300'
                          : 'border-gray-600 bg-gray-900/50 text-green-200 hover:border-emerald-500'
                      }`}
                    >
                      <div className="text-sm font-semibold">{phase.name}</div>
                    </button>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* –í–∫–ª–∞–¥–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ */}
          {activeTab === 'scenarios' && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-green-400">üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏</h2>
              <div className="grid lg:grid-cols-2 gap-6">
                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                  <h3 className="text-lg font-bold text-green-300 mb-4">–í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è</h3>
                  <div className="space-y-3">
                    <select
                      value={selectedScenario}
                      onChange={(e) => setSelectedScenario(e.target.value)}
                      className="w-full px-4 py-2 rounded-lg bg-gray-900 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π...</option>
                      <option value="bunker">üè† –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π –±—É–Ω–∫–µ—Ä</option>
                      <option value="nomad">üöå –ë—Ä–æ–Ω–µ–∞–≤—Ç–æ–±—É—Å "–ù–æ–º–∞–¥"</option>
                      <option value="station">üõ∞Ô∏è –û—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è</option>
                      <option value="submarine">üö§ –ü–æ–¥–≤–æ–¥–Ω–∞—è –ª–æ–¥–∫–∞</option>
                    </select>
                    <ActionButton onClick={assignScenario} icon="üéØ" disabled={!selectedScenario}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å
                      —Å—Ü–µ–Ω–∞—Ä–∏–π</ActionButton>
                  </div>
                </div>

                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                  <h3 className="text-lg font-bold text-green-300 mb-4">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-semibold text-green-300 mb-2">–°–ª–æ–∂–Ω–æ—Å—Ç—å</label>
                      <select
                        className="w-full px-4 py-2 rounded-lg bg-gray-900 border border-emerald-700 text-green-300">
                        <option>üéØ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è</option>
                        <option>‚ö†Ô∏è –°–ª–æ–∂–Ω–∞—è</option>
                        <option>üî• –í—ã–∂–∏–≤–∞–Ω–∏–µ</option>
                        <option>‚ò¢Ô∏è –ê–¥—Å–∫–∞—è</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-semibold text-green-300 mb-2">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</label>
                      <select
                        className="w-full px-4 py-2 rounded-lg bg-gray-900 border border-emerald-700 text-green-300">
                        <option>‚è±Ô∏è –ö–æ—Ä–æ—Ç–∫–∞—è (2-3 —á)</option>
                        <option>üïí –°—Ä–µ–¥–Ω—è—è (4-5 —á)</option>
                        <option>‚è≥ –î–ª–∏–Ω–Ω–∞—è (6+ —á)</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* –í–∫–ª–∞–¥–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ */}
          {activeTab === 'resources' && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-green-400">üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏</h2>
              <div className="grid lg:grid-cols-2 gap-6">
                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                  <h3 className="text-lg font-bold text-green-300 mb-4">–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-semibold text-green-300 mb-2">–ò–∑–º–µ–Ω–µ–Ω–∏–µ
                        –∑–∞–ø–∞—Å–æ–≤: {resourceModifier}%</label>
                      <input
                        type="range"
                        min="-50"
                        max="50"
                        value={resourceModifier}
                        onChange={(e) => setResourceModifier(parseInt(e.target.value))}
                        className="w-full"
                      />
                      <div className="flex justify-between text-xs text-green-200/60">
                        <span>-50%</span>
                        <span>0%</span>
                        <span>+50%</span>
                      </div>
                    </div>
                    <ActionButton onClick={modifyResources} icon="üìä" disabled={resourceModifier === 0}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å
                      –∏–∑–º–µ–Ω–µ–Ω–∏—è</ActionButton>
                  </div>
                </div>

                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                  <h3 className="text-lg font-bold text-green-300 mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                  <div className="grid grid-cols-2 gap-3">
                    {[
                      { name: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É', value: '+25%', action: () => setResourceModifier(25) },
                      { name: '‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –≤–æ–¥—É', value: '-25%', action: () => setResourceModifier(-25) },
                      { name: 'üíä –ú–µ–¥–∏—Ü–∏–Ω–∞', value: '+50%', action: () => setResourceModifier(50) },
                      { name: '‚ö° –≠–Ω–µ—Ä–≥–∏—è', value: '+30%', action: () => setResourceModifier(30) }
                    ].map((action, index) => (
                      <button
                        key={index}
                        onClick={action.action}
                        className="p-3 rounded-lg border border-emerald-700/30 bg-gray-900/50 hover:bg-emerald-900/20 transition-all text-center"
                      >
                        <div className="font-semibold text-green-300">{action.name}</div>
                        <div className="text-xs text-emerald-400">{action.value}</div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* –í–∫–ª–∞–¥–∫–∞ –º–∏–Ω–∏-–∏–≥—Ä */}
          {activeTab === 'minigames' && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-green-400">üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã</h2>

              <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5">
                <h3 className="text-lg font-bold text-green-300 mb-4">–†—É–ª–µ—Ç–∫–∞ —Ç–æ–ø–ª–∏–≤–∞</h3>
                <div className="grid lg:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div className="bg-amber-900/20 border border-amber-700/50 rounded-lg p-4">
                      <div className="flex items-center gap-3 text-amber-300">
                        <span>üéØ</span>
                        <div className="text-sm">
                          <strong>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong>
                          <div className="mt-1">–í—ã –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç–µ —á–∏—Å–ª–æ, –∏–≥—Ä–æ–∫–∏ –ø—ã—Ç–∞—é—Ç—Å—è —É–≥–∞–¥–∞—Ç—å. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç
                            —Ç–æ–ø–ª–∏–≤–æ!
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-semibold text-green-300 mb-2">–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ</label>
                        <input
                          type="number"
                          value={targetNumber}
                          onChange={(e) => setTargetNumber(parseInt(e.target.value) || 50)}
                          min={1}
                          max={100}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                        />
                        <div className="text-xs text-green-200/60 mt-1">–û—Ç 1 –¥–æ 100</div>
                      </div>
                      <div>
                        <label className="block text-sm font-semibold text-green-300 mb-2">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫</label>
                        <select
                          value={gameAttempts}
                          onChange={(e) => setGameAttempts(parseInt(e.target.value))}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                        >
                          <option value={3}>3 (–°–ª–æ–∂–Ω–æ)</option>
                          <option value={5}>5 (–ù–æ—Ä–º–∞–ª—å–Ω–æ)</option>
                          <option value={8}>8 (–õ–µ–≥–∫–æ)</option>
                          <option value={10}>10 (–û—á–µ–Ω—å –ª–µ–≥–∫–æ)</option>
                        </select>
                      </div>
                    </div>

                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-semibold text-green-300 mb-2">–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ</label>
                        <input
                          type="number"
                          value={gameRange.min}
                          onChange={(e) => setGameRange(prev => ({ ...prev, min: parseInt(e.target.value) || 1 }))}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-semibold text-green-300 mb-2">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ</label>
                        <input
                          type="number"
                          value={gameRange.max}
                          onChange={(e) => setGameRange(prev => ({ ...prev, max: parseInt(e.target.value) || 100 }))}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 border border-emerald-700 text-green-300 focus:outline-none focus:border-emerald-500"
                        />
                      </div>
                    </div>

                    <div className="bg-emerald-900/20 border border-emerald-700/50 rounded-lg p-4">
                      <div className="text-center">
                        <div className="text-sm text-green-200/60">–ò–≥—Ä–æ–∫–∏ —É–≤–∏–¥—è—Ç –¥–∏–∞–ø–∞–∑–æ–Ω:</div>
                        <div className="text-xl font-bold text-emerald-400">{gameRange.min} - {gameRange.max}</div>
                        <div className="text-sm text-green-200/60 mt-1">–ü–æ–ø—ã—Ç–æ–∫: {gameAttempts}</div>
                      </div>
                    </div>

                    <button
                      onClick={() => setFuelGameActive(true)}
                      className="w-full py-4 bg-gradient-to-r from-emerald-500 to-green-500 text-gray-900 font-bold rounded-lg hover:from-emerald-400 hover:to-green-400 transition-all text-lg flex items-center justify-center gap-3"
                    >
                      <span>‚õΩ</span>
                      <span>–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É —Ç–æ–ø–ª–∏–≤–∞</span>
                    </button>
                  </div>

                  <div className="space-y-4">
                    <div className="bg-gray-800/50 rounded-lg p-4">
                      <h4 className="font-semibold text-green-300 mb-3">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏–≥—Ä—ã:</h4>
                      <div className="space-y-2 text-sm text-green-200/80">
                        <div className="flex items-center gap-2">‚úÖ <span>–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –≤–∏–¥–∏—Ç —á–∏—Å–ª–æ</span></div>
                        <div className="flex items-center gap-2">‚úÖ <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span></div>
                        <div className="flex items-center gap-2">‚úÖ <span>–†–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤</span></div>
                        <div className="flex items-center gap-2">‚úÖ <span>–ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</span></div>
                        <div className="flex items-center gap-2">‚úÖ <span>–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∏–≥—Ä–æ–π</span></div>
                      </div>
                    </div>

                    <div className="bg-blue-900/20 border border-blue-700/50 rounded-lg p-4">
                      <div className="flex items-center gap-3 text-blue-300">
                        <span>üèÜ</span>
                        <div className="text-sm">
                          <strong>–ù–∞–≥—Ä–∞–¥–∞:</strong>
                          <div>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç {Math.floor((gameRange.max - gameRange.min) / 10) + 10}–ª —Ç–æ–ø–ª–∏–≤–∞
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-purple-900/20 border border-purple-700/50 rounded-lg p-4">
                      <div className="flex items-center gap-3 text-purple-300">
                        <span>üëÅÔ∏è</span>
                        <div className="text-sm">
                          <strong>–¢–æ–ª—å–∫–æ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ:</strong>
                          <div>–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: <span className="font-bold text-xl">{targetNumber}</span></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5 opacity-60">
                  <h3 className="text-lg font-bold text-green-300 mb-4">üé≤ –ö–æ—Å—Ç–∏ —É–¥–∞—á–∏</h3>
                  <p className="text-green-200/60">–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ...</p>
                </div>

                <div className="rounded-xl border border-emerald-700/50 bg-gray-800/30 p-5 opacity-60">
                  <h3 className="text-lg font-bold text-green-300 mb-4">üéØ –¢–∏—Ä</h3>
                  <p className="text-green-200/60">–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ...</p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∏–Ω–∏-–∏–≥—Ä—ã */}
      <FuelGuessGame
        isActive={fuelGameActive}
        onClose={() => setFuelGameActive(false)}
        adminKey={adminKey}
        players={players}
      />
    </div>
  );
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
export { FuelGameClient };