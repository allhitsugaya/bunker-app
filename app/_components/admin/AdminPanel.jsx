'use client';
import { useEffect, useMemo, useState } from 'react';

async function fetchJSON(url, opts) {
  const res = await fetch(url, opts);
  const ct = res.headers.get('content-type') || '';
  let data = null;
  try {
    data = ct.includes('application/json') ? await res.json() : null;
  } catch {
  }
  if (!res.ok) {
    const err = new Error(data?.error || data?.message || `HTTP ${res.status}`);
    err.status = res.status;
    throw err;
  }
  return data ?? {};
}

export default function AdminPanel() {
  const [adminKey, setAdminKey] = useState('');
  const [players, setPlayers] = useState([]);
  const [error, setError] = useState('');

  // ------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è -------
  const [poll, setPoll] = useState(null);         // { id, createdAt, candidates[], question }
  const [counts, setCounts] = useState({});       // { playerId: votes }
  const [last, setLast] = useState(null);         // { summary } | null

  // —Ñ–æ—Ä–º–∞ —Å—Ç–∞—Ä—Ç–∞
  const [question, setQuestion] = useState('–ö–æ–≥–æ –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –±—É–Ω–∫–µ—Ä–∞?');
  const [mode, setMode] = useState('players');    // 'players' | 'custom'
  const [customOptions, setCustomOptions] = useState(''); // —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏

  // ===== –∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ (–∞–¥–º–∏–Ω) =====
  async function loadPlayers() {
    if (!adminKey) return;
    setError('');
    try {
      const data = await fetchJSON('/api/state', { headers: { 'x-admin-key': adminKey } });
      setPlayers(data.players || []);
    } catch (e) {
      if (e.status === 401) setError('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –≤–µ–¥—É—â–µ–≥–æ');
      else setError('‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤');
      setPlayers([]);
    }
  }

  // ===== –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è =====
  async function loadPoll() {
    try {
      const data = await fetchJSON('/api/polls/state');
      setPoll(data.poll || null);
      setCounts(data.counts || {});
      setLast(data.last || null);
    } catch {
      setPoll(null);
      setCounts({});
      setLast(null);
    }
  }

  useEffect(() => {
    if (!adminKey) return;
    const tick = async () => {
      await Promise.allSettled([loadPlayers(), loadPoll()]);
    };
    tick();
    const t = setInterval(tick, 2500);
    return () => clearInterval(t);
  }, [adminKey]);

  // ===== –¥–µ–π—Å—Ç–≤–∏—è =====
  async function toggleReveal(id) {
    await fetch('/api/admin/reveal', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ targetId: id })
    });
    loadPlayers();
  }

  async function toggleExclude(id) {
    await fetch('/api/admin/exclude', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ targetId: id })
    });
    loadPlayers();
  }

  async function deletePlayer(id) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?')) return;
    await fetch('/api/admin/delete-player', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ targetId: id })
    });
    loadPlayers();
  }

  async function wipeAll() {
    if (!confirm('‚ö† –°—Ç–µ—Ä–µ—Ç—å –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?')) return;
    await fetch('/api/admin/wipe', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey }
    });
    await Promise.allSettled([loadPlayers(), loadPoll()]);
  }

  // --- –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ---
  async function startPoll() {
    if (!adminKey) return alert('–í–≤–µ–¥–∏—Ç–µ ADMIN_KEY');

    let candidates = [];
    if (mode === 'players') {
      candidates = players.filter(p => !p.excluded).map(p => p.id);
    } else {
      // –∫–∞—Å—Ç–æ–º–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥) ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –ø—Å–µ–≤–¥–æ-–∏–≥—Ä–æ–∫–æ–≤
      // –ß—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º —Å–µ–π—á–∞—Å.
      // –ù–æ –µ—Å–ª–∏ –Ω–∞–¥–æ ‚Äî –º–æ–∂–Ω–æ –∑–∞–≤–µ—Å—Ç–∏ —Å–ø–µ—Ü-–¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
      alert('–†–µ–∂–∏–º ‚Äú–°–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã‚Äù –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í—ã–±–µ—Ä–∏—Ç–µ "–ü–æ –∏–≥—Ä–æ–∫–∞–º".');
      return;
    }

    await fetchJSON('/api/polls/start', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ candidates, question })
    });
    await loadPoll();
  }

  async function closePoll() {
    if (!adminKey) return alert('–í–≤–µ–¥–∏—Ç–µ ADMIN_KEY');
    await fetchJSON('/api/polls/close', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ policy: 'most' })
    });
    await loadPoll();
  }

  const totalVotes = useMemo(
    () => Object.values(counts).reduce((s, n) => s + n, 0),
    [counts]
  );

  // –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ id
  const nameById = (id) => players.find(p => p.id === id)?.name || id;

  return (
    <div className="min-h-screen bg-gray-950 text-green-300 p-6 font-mono">
      <div className="max-w-6xl mx-auto space-y-8">
        <h1 className="text-2xl font-bold text-green-400">üß† –ü–∞–Ω–µ–ª—å –≤–µ–¥—É—â–µ–≥–æ</h1>

        {/* –ö–ª—é—á + –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="flex flex-wrap gap-2 items-center">
          <input
            type="password"
            placeholder="ADMIN_KEY"
            className="px-4 py-2 rounded bg-gray-800 border border-green-700 flex-1"
            value={adminKey}
            onChange={(e) => setAdminKey(e.target.value)}
          />
          <button onClick={loadPlayers}
                  className="px-4 py-2 bg-green-500 text-black font-bold rounded hover:bg-green-400">
            üîë –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤
          </button>
          <button onClick={wipeAll} className="px-4 py-2 bg-red-600 text-white font-bold rounded hover:bg-red-500">
            üß® –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É (wipe)
          </button>
        </div>

        {error && <p className="text-red-400">{error}</p>}

        {/* ===== –ë–ª–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–∞–¥–º–∏–Ω) ===== */}
        <div className="rounded-xl border border-emerald-800/40 bg-gray-900 p-4">
          <div className="flex justify-between items-start mb-3">
            <h2 className="text-xl font-bold text-green-400">üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</h2>
            <button
              onClick={loadPoll}
              className="px-3 py-1.5 rounded border border-emerald-700 text-emerald-300 hover:bg-gray-800"
            >
              –û–±–Ω–æ–≤–∏—Ç—å
            </button>
          </div>

          {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ */}
          <div className="text-sm mb-4">
            <div>
              –°—Ç–∞—Ç—É—Å:{' '}
              {poll ? <span className="text-emerald-400">–ê–∫—Ç–∏–≤–Ω–æ</span> :
                <span className="text-gray-400">–ó–∞–∫—Ä—ã—Ç–æ</span>}
              {' '}‚Ä¢ –í–æ–ø—Ä–æ—Å:{' '}
              <span className="text-green-200">{poll?.question || '‚Äî'}</span>
            </div>
            {!poll && <div className="text-gray-400 mt-1">–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.</div>}
          </div>

          {/* –¢–µ–∫—É—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ */}
          {poll && (
            <div className="grid md:grid-cols-2 gap-4 mb-4">
              <div className="rounded-lg border border-emerald-800/30 bg-gray-900/70 p-3">
                <div className="text-sm font-semibold text-green-300 mb-2">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã</div>
                {poll.candidates?.length ? (
                  <div className="grid gap-2">
                    {poll.candidates.map((id) => {
                      const votes = counts?.[id] ?? 0;
                      const pct = totalVotes > 0 ? Math.round((votes / totalVotes) * 100) : 0;
                      const p = players.find(x => x.id === id);
                      return (
                        <div key={id} className="rounded-lg border border-emerald-800/30 bg-gray-900 px-3 py-2">
                          <div className="flex items-center justify-between">
                            <div className="font-semibold text-green-300">
                              {nameById(id)} {p?.excluded &&
                              <span className="text-red-400 text-xs ml-1">[–ò–°–ö–õ–Æ–ß–Å–ù]</span>}
                            </div>
                            <div
                              className="text-xs text-green-200/80">–ì–æ–ª–æ—Å–∞: {votes} {totalVotes > 0 && `(${pct}%)`}</div>
                          </div>
                          <div className="mt-1 h-1.5 w-full bg-gray-800 rounded">
                            <div className="h-1.5 bg-emerald-500 rounded" style={{ width: `${pct}%` }} />
                          </div>
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <div className="text-gray-400 text-sm">–ù–µ—Ç –æ–ø—Ü–∏–π.</div>
                )}
              </div>

              <div className="rounded-lg border border-emerald-800/30 bg-gray-900/70 p-3">
                <div className="text-sm font-semibold text-green-300 mb-2">–°–≤–æ–¥–∫–∞</div>
                <div className="text-sm text-green-200/80">–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {totalVotes}</div>
                <div className="mt-2 grid gap-1 text-xs">
                  {Object.entries(counts || {}).map(([id, cnt]) => (
                    <div key={id} className="flex justify-between">
                      <span className="opacity-80">{nameById(id)}</span>
                      <span className="font-semibold">{cnt}</span>
                    </div>
                  ))}
                </div>

                <div className="mt-4 flex gap-2">
                  <button
                    onClick={closePoll}
                    className="px-3 py-2 bg-red-600 text-white rounded hover:bg-red-500"
                  >
                    –ó–∞–∫—Ä—ã—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* –°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è */}
          {!poll && (
            <>
              <hr className="border-emerald-800/40 my-3" />
              <div className="text-green-300 font-semibold mb-2">–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</div>

              <div className="grid gap-3 max-w-2xl">
                <label className="text-sm">
                  –í–æ–ø—Ä–æ—Å
                  <input
                    className="mt-1 w-full px-3 py-2 bg-gray-900 border border-emerald-800/40 rounded outline-none"
                    placeholder="–ö–æ–≥–æ –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –±—É–Ω–∫–µ—Ä–∞?"
                    value={question}
                    onChange={(e) => setQuestion(e.target.value)}
                  />
                </label>

                <div className="flex items-center gap-4 text-sm">
                  <label className="inline-flex items-center gap-2">
                    <input
                      type="radio"
                      name="mode"
                      value="players"
                      checked={mode === 'players'}
                      onChange={() => setMode('players')}
                    />
                    –ü–æ –∏–≥—Ä–æ–∫–∞–º (–∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏)
                  </label>

                  <label className="inline-flex items-center gap-2 opacity-60">
                    <input
                      type="radio"
                      name="mode"
                      value="custom"
                      checked={mode === 'custom'}
                      onChange={() => setMode('custom')}
                      disabled
                    />
                    –°–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Å–∫–æ—Ä–æ)
                  </label>
                </div>

                {/* –û—Ç–∫–ª—é—á–µ–Ω–æ: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ */}
                {mode === 'custom' && (
                  <textarea
                    className="w-full min-h-[120px] px-3 py-2 bg-gray-900 border border-emerald-800/40 rounded outline-none"
                    placeholder="–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
                    value={customOptions}
                    onChange={(e) => setCustomOptions(e.target.value)}
                    disabled
                  />
                )}

                <div>
                  <button
                    onClick={startPoll}
                    className="px-4 py-2 bg-emerald-600 text-black font-bold rounded hover:bg-emerald-500"
                  >
                    ‚ñ∂ –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                  </button>
                </div>
              </div>
            </>
          )}
        </div>

        {/* ===== –ò–≥—Ä–æ–∫–∏ ===== */}
        <div className="grid gap-3">
          {players.map((p) => (
            <div
              key={p.id}
              className={`p-4 rounded-xl border ${
                p.excluded ? 'border-red-600 bg-gray-900/70' : 'border-green-700 bg-gray-900'
              } shadow-lg`}
            >
              <div className="flex justify-between items-center">
                <h2 className="text-lg font-bold text-green-400">
                  {p.name} ‚Ä¢ {p.age ?? '‚Äî'} {p.excluded ? 'üõë –ò–°–ö–õ–Æ–ß–Å–ù' : ''}
                </h2>
                <div className="flex gap-2">
                  <button
                    onClick={() => toggleReveal(p.id)}
                    className="px-3 py-1 bg-emerald-600 text-black rounded hover:bg-emerald-500"
                  >
                    üîì Toggle Reveal
                  </button>
                  <button
                    onClick={() => toggleExclude(p.id)}
                    className={`px-3 py-1 rounded font-bold ${
                      p.excluded ? 'bg-yellow-400 text-black' : 'bg-red-600 text-white'
                    }`}
                  >
                    {p.excluded ? '–í–µ—Ä–Ω—É—Ç—å' : '–ò—Å–∫–ª—é—á–∏—Ç—å'}
                  </button>
                  <button
                    onClick={() => deletePlayer(p.id)}
                    className="px-3 py-1 rounded font-bold bg-red-700 text-white hover:bg-red-600"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>

              <div className="mt-2 grid md:grid-cols-2 gap-x-6 gap-y-1 text-sm">
                <div>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {p.profession ?? '‚Äî'}</div>
                <div>–ó–¥–æ—Ä–æ–≤—å–µ: {p.health ?? '‚Äî'}</div>
                <div>–ü—Å–∏—Ö–∏–∫–∞: {p.psychology ?? '‚Äî'}</div>
                <div>–ü—Ä–µ–¥–º–µ—Ç: {p.item ?? '‚Äî'}</div>
                <div>–•–æ–±–±–∏: {p.hobby ?? '‚Äî'}</div>
                <div>–°—Ç—Ä–∞—Ö: {p.fear ?? '‚Äî'}</div>
                <div>–°–µ–∫—Ä–µ—Ç: {p.secret ?? '‚Äî'}</div>
                <div>–û—Ç–Ω–æ—à–µ–Ω–∏–µ: {p.relationship ?? '‚Äî'}</div>
                <div>–ß–µ—Ä—Ç–∞: {p.trait ?? '‚Äî'}</div>
                <div>–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {p.ability ?? '‚Äî'}</div>
              </div>
            </div>
          ))}

          {players.length === 0 && !error && (
            <div className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤‚Äù.</div>
          )}
        </div>
      </div>
    </div>
  );
}
