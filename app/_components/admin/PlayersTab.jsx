// app/admin/_components/PlayersTab.jsx
'use client';

const ActionButton = ({ onClick, children, variant = 'primary', icon, size = 'medium' }) => {
  const variants = {
    primary: 'bg-gradient-to-r from-emerald-500 to-green-500 text-gray-900 hover:from-emerald-400 hover:to-green-400',
    secondary: 'bg-gray-800 text-green-300 border border-emerald-700 hover:bg-gray-700 hover:border-emerald-600',
    danger: 'bg-gradient-to-r from-red-600 to-orange-600 text-white hover:from-red-500 hover:to-orange-500',
    warning: 'bg-gradient-to-r from-yellow-600 to-amber-600 text-white hover:from-yellow-500 hover:to-amber-500'
  };

  const sizes = {
    small: 'px-3 py-1.5 text-sm',
    medium: 'px-4 py-2 text-sm',
    large: 'px-6 py-3 text-base'
  };

  return (
    <button
      onClick={onClick}
      className={`flex items-center gap-2 rounded-lg font-semibold transition-all duration-200 active:scale-95 ${
        variants[variant]
      } ${sizes[size]}`}
    >
      {icon && <span>{icon}</span>}
      {children}
    </button>
  );
};

async function fetchJSON(url, opts) {
  const res = await fetch(url, opts);
  const ct = res.headers.get('content-type') || '';
  let data = null;
  try {
    data = ct.includes('application/json') ? await res.json() : null;
  } catch {
  }
  if (!res.ok) {
    const err = new Error(data?.error || data?.message || `HTTP ${res.status}`);
    err.status = res.status;
    throw err;
  }
  return data ?? {};
}

export default function PlayersTab({ adminKey, players, onDataUpdate, onError }) {

  const toggleReveal = async (id) => {
    await fetch('/api/admin/reveal', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ targetId: id })
    });
    onDataUpdate();
  };

  const toggleExclude = async (id) => {
    await fetch('/api/admin/exclude', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ targetId: id })
    });
    onDataUpdate();
  };

  const deletePlayer = async (id) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?')) return;
    await fetch('/api/admin/delete-player', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'x-admin-key': adminKey },
      body: JSON.stringify({ targetId: id })
    });
    onDataUpdate();
  };

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold text-green-400 mb-4">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏</h2>
      <div className="grid gap-4">
        {players.map((player) => (
          <div
            key={player.id}
            className={`p-5 rounded-xl border-2 backdrop-blur-sm transition-all duration-300 ${
              player.excluded
                ? 'border-red-500/50 bg-red-900/20'
                : 'border-emerald-700/50 bg-gray-800/30 hover:border-emerald-500/70'
            }`}
          >
            <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  <h3 className="text-xl font-bold text-green-300">{player.name}</h3>
                  {player.excluded && (
                    <span className="px-2 py-1 bg-red-500 text-white text-xs rounded-full font-bold">
                      üö´ –ò–°–ö–õ–Æ–ß–Å–ù
                    </span>
                  )}
                  {player.id === players[0]?.id && (
                    <span className="px-2 py-1 bg-yellow-500 text-gray-900 text-xs rounded-full font-bold">
                      üëë –õ–ò–î–ï–†
                    </span>
                  )}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 text-sm">
                  <div><span className="text-green-200/60">–í–æ–∑—Ä–∞—Å—Ç:</span> {player.age || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–ü–æ–ª:</span> {player.gender || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–†–∞—Å–∞:</span> {player.race || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</span> {player.profession || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–ó–¥–æ—Ä–æ–≤—å–µ:</span> {player.health || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–ü—Å–∏—Ö–∏–∫–∞:</span> {player.psychology || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–•–æ–±–±–∏:</span> {player.hobby || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–°—Ç—Ä–∞—Ö:</span> {player.fear || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–ß–µ—Ä—Ç–∞:</span> {player.trait || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</span> {player.ability || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–°–µ–∫—Ä–µ—Ç:</span> {player.secret || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–ü—Ä–µ–¥–º–µ—Ç:</span> {player.item || '‚Äî'}</div>
                  <div><span className="text-green-200/60">–û—Ç–Ω–æ—à–µ–Ω–∏–µ:</span> {player.relationship || '‚Äî'}</div>
                </div>
              </div>

              <div className="flex flex-wrap gap-2">
                <ActionButton onClick={() => toggleReveal(player.id)} variant="secondary" icon="üîì" size="small">
                  –†–∞—Å–∫—Ä—ã—Ç—å
                </ActionButton>
                <ActionButton onClick={() => toggleExclude(player.id)}
                              variant={player.excluded ? 'warning' : 'danger'}
                              icon={player.excluded ? '‚Ü©Ô∏è' : 'üö´'} size="small">
                  {player.excluded ? '–í–µ—Ä–Ω—É—Ç—å' : '–ò—Å–∫–ª—é—á–∏—Ç—å'}
                </ActionButton>
                <ActionButton onClick={() => deletePlayer(player.id)} variant="danger" icon="üóëÔ∏è" size="small">
                  –£–¥–∞–ª–∏—Ç—å
                </ActionButton>
              </div>
            </div>
          </div>
        ))}
      </div>

      {players.length === 0 && (
        <div className="text-center py-12 text-green-200/40">
          <div className="text-6xl mb-4">üë•</div>
          <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö</div>
          <div className="text-sm mt-2">–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ</div>
        </div>
      )}
    </div>
  );
}