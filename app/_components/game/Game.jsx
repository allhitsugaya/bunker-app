// app/_components/games/FuelGuessGame.jsx
'use client';
import { useEffect, useState } from 'react';

export default function FuelGuessGame({ isActive = false, onFuelEarned, onClose }) {
  const [gameState, setGameState] = useState('setup'); // 'setup', 'playing', 'result'
  const [difficulty, setDifficulty] = useState('medium');
  const [targetNumber, setTargetNumber] = useState('');
  const [minRange, setMinRange] = useState(1);
  const [maxRange, setMaxRange] = useState(100);
  const [playerGuess, setPlayerGuess] = useState('');
  const [attempts, setAttempts] = useState(0);
  const [maxAttempts, setMaxAttempts] = useState(5);
  const [hint, setHint] = useState('');
  const [gameLog, setGameLog] = useState([]);

  const difficulties = {
    easy: {
      name: 'üéØ –õ–ï–ì–ö–û',
      attempts: 8,
      fuelReward: 10,
      description: '–ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫, –º–µ–Ω—å—à–µ —Ç–æ–ø–ª–∏–≤–∞'
    },
    medium: {
      name: '‚ö†Ô∏è –°–†–ï–î–ù–ï',
      attempts: 5,
      fuelReward: 25,
      description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å'
    },
    hard: {
      name: 'üî• –°–õ–û–ñ–ù–û',
      attempts: 3,
      fuelReward: 50,
      description: '–ú–∞–ª–æ –ø–æ–ø—ã—Ç–æ–∫, –º–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞'
    }
  };

  useEffect(() => {
    if (!isActive) {
      resetGame();
    }
  }, [isActive]);

  const startGame = () => {
    const target = parseInt(targetNumber);
    const min = parseInt(minRange);
    const max = parseInt(maxRange);

    if (isNaN(target) || isNaN(min) || isNaN(max)) {
      setHint('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞');
      return;
    }

    if (target < min || target > max) {
      setHint(`‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${min}-${max}`);
      return;
    }

    if (min >= max) {
      setHint('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ');
      return;
    }

    const diff = difficulties[difficulty];
    setMaxAttempts(diff.attempts);
    setAttempts(0);
    setPlayerGuess('');
    setHint('');
    setGameLog([]);
    setGameState('playing');

    addToLog(`üéÆ –í–µ–¥—É—â–∏–π –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç ${min} –¥–æ ${max}`);
    addToLog(`‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${diff.name} (${diff.attempts} –ø–æ–ø—ã—Ç–æ–∫)`);
    addToLog(`‚õΩ –ù–∞–≥—Ä–∞–¥–∞: ${diff.fuelReward}–ª —Ç–æ–ø–ª–∏–≤–∞`);
  };

  const makeGuess = () => {
    const guess = parseInt(playerGuess);
    const min = parseInt(minRange);
    const max = parseInt(maxRange);

    if (isNaN(guess) || guess < min || guess > max) {
      setHint(`‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${min} –¥–æ ${max}`);
      return;
    }

    const newAttempts = attempts + 1;
    setAttempts(newAttempts);

    if (guess === parseInt(targetNumber)) {
      // –ü–æ–±–µ–¥–∞! (–æ—á–µ–Ω—å –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
      const fuelEarned = difficulties[difficulty].fuelReward;
      addToLog(`üéâ –ù–ï–í–ï–†–û–Ø–¢–ù–û! –£–ì–ê–î–ê–õ –ß–ò–°–õ–û ${targetNumber}!`);
      addToLog(`‚õΩ –í–´–ò–ì–†–´–®: +${fuelEarned}–ª —Ç–æ–ø–ª–∏–≤–∞`);
      setGameState('result');
      onFuelEarned?.(fuelEarned, true);
    } else if (newAttempts >= maxAttempts) {
      // –ü—Ä–æ–∏–≥—Ä—ã—à (–æ—á–µ–Ω—å –≤–µ—Ä–æ—è—Ç–Ω–æ)
      addToLog(`üí• –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ß–∏—Å–ª–æ –±—ã–ª–æ: ${targetNumber}`);
      addToLog(`üòî –¢–æ–ø–ª–∏–≤–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ`);
      setGameState('result');
      onFuelEarned?.(0, false);
    } else {
      // –ü–æ–¥—Å–∫–∞–∑–∫–∞
      const direction = guess < parseInt(targetNumber) ? '–ë–û–õ–¨–®–ï' : '–ú–ï–ù–¨–®–ï';
      const remaining = maxAttempts - newAttempts;
      setHint(`üìä ${direction} | –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${remaining}`);
      addToLog(`üéØ ${guess} ‚Üí ${direction} (${remaining} –ø–æ–ø—ã—Ç–æ–∫)`);
    }

    setPlayerGuess('');
  };

  const addToLog = (message) => {
    setGameLog(prev => [...prev, message]);
  };

  const resetGame = () => {
    setGameState('setup');
    setTargetNumber('');
    setPlayerGuess('');
    setAttempts(0);
    setMaxAttempts(5);
    setHint('');
    setGameLog([]);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      if (gameState === 'setup') {
        startGame();
      } else if (gameState === 'playing') {
        makeGuess();
      }
    }
  };

  if (!isActive) return null;

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 z-50">
      <div
        className="bg-gradient-to-br from-gray-900 to-gray-800 border-2 border-emerald-500/50 rounded-2xl shadow-2xl shadow-emerald-500/20 max-w-md w-full max-h-[90vh] overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="bg-gradient-to-r from-emerald-900/50 to-green-900/50 p-4 border-b border-emerald-500/30">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold text-green-300 flex items-center gap-2">
              ‚õΩ –†–£–õ–ï–¢–ö–ê –¢–û–ü–õ–ò–í–ê
            </h2>
            <button
              onClick={onClose}
              className="text-green-300 hover:text-white transition-colors p-1"
            >
              ‚úï
            </button>
          </div>
          <p className="text-center text-green-200/70 text-sm mt-2">
            –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏-–∏–≥—Ä–æ–π –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ
          </p>
        </div>

        <div className="p-6 space-y-6">
          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã */}
          {gameState === 'setup' && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-green-400 text-center">
                –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏-–∏–≥—Ä—ã
              </h3>

              {/* –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ */}
              <div className="space-y-2">
                <label className="block text-sm font-semibold text-green-300">
                  –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ:
                </label>
                <input
                  type="number"
                  value={targetNumber}
                  onChange={(e) => setTargetNumber(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="w-full px-4 py-3 bg-gray-800 border-2 border-emerald-700 rounded-lg text-green-300 text-center text-xl font-bold focus:outline-none focus:border-emerald-500 transition-colors"
                  placeholder="–¢–≤–æ–µ —á–∏—Å–ª–æ..."
                  autoFocus
                />
              </div>

              {/* –î–∏–∞–ø–∞–∑–æ–Ω */}
              <div className="grid grid-cols-2 gap-3">
                <div className="space-y-2">
                  <label className="block text-sm font-semibold text-green-300">
                    –û—Ç:
                  </label>
                  <input
                    type="number"
                    value={minRange}
                    onChange={(e) => setMinRange(e.target.value)}
                    className="w-full px-3 py-2 bg-gray-800 border border-emerald-700 rounded-lg text-green-300 text-center focus:outline-none focus:border-emerald-500"
                  />
                </div>
                <div className="space-y-2">
                  <label className="block text-sm font-semibold text-green-300">
                    –î–æ:
                  </label>
                  <input
                    type="number"
                    value={maxRange}
                    onChange={(e) => setMaxRange(e.target.value)}
                    className="w-full px-3 py-2 bg-gray-800 border border-emerald-700 rounded-lg text-green-300 text-center focus:outline-none focus:border-emerald-500"
                  />
                </div>
              </div>

              {/* –°–ª–æ–∂–Ω–æ—Å—Ç—å */}
              <div className="space-y-2">
                <label className="block text-sm font-semibold text-green-300">
                  –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
                </label>
                <select
                  value={difficulty}
                  onChange={(e) => setDifficulty(e.target.value)}
                  className="w-full px-3 py-2 bg-gray-800 border border-emerald-700 rounded-lg text-green-300 focus:outline-none focus:border-emerald-500"
                >
                  {Object.entries(difficulties).map(([key, diff]) => (
                    <option key={key} value={key}>
                      {diff.name} - {diff.attempts} –ø–æ–ø—ã—Ç–æ–∫, {diff.fuelReward}–ª
                    </option>
                  ))}
                </select>
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ */}
              <div className="bg-gray-800/30 rounded-lg p-3 border border-emerald-700/30">
                <div className="text-sm text-green-200">
                  <div className="font-semibold">{difficulties[difficulty].name}</div>
                  <div className="text-green-200/70 text-xs mt-1">
                    {difficulties[difficulty].description}
                  </div>
                  <div className="flex justify-between text-xs mt-2">
                    <span>–ü–æ–ø—ã—Ç–æ–∫: {difficulties[difficulty].attempts}</span>
                    <span className="text-emerald-400">–ù–∞–≥—Ä–∞–¥–∞: {difficulties[difficulty].fuelReward}–ª</span>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-3">
                <button
                  onClick={onClose}
                  className="py-3 bg-gray-700 text-green-300 font-bold rounded-lg hover:bg-gray-600 transition-colors"
                >
                  ‚ùå –û–¢–ú–ï–ù–ê
                </button>
                <button
                  onClick={startGame}
                  disabled={!targetNumber}
                  className="py-3 bg-gradient-to-r from-emerald-500 to-green-500 text-gray-900 font-bold rounded-lg hover:from-emerald-400 hover:to-green-400 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨
                </button>
              </div>
            </div>
          )}

          {/* –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å */}
          {gameState === 'playing' && (
            <div className="space-y-4">
              {/* –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã */}
              <div className="bg-gray-800/30 rounded-lg p-3 border border-emerald-700/30">
                <div className="flex justify-between items-center text-sm">
                  <span className="text-green-300 font-semibold">
                    {difficulties[difficulty].name}
                  </span>
                  <span className="text-emerald-400">
                    –ü–æ–ø—ã—Ç–æ–∫: {attempts}/{maxAttempts}
                  </span>
                </div>
                <div className="text-xs text-green-200/60 mt-1">
                  –î–∏–∞–ø–∞–∑–æ–Ω: {minRange} - {maxRange}
                </div>
                <div className="text-xs text-amber-400 mt-1 font-semibold">
                  üîí –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {targetNumber}
                </div>
              </div>

              {/* –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ */}
              <div className="text-center space-y-3">
                <div className="text-4xl">üéÆ</div>
                <p className="text-green-300 font-semibold">
                  –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤!
                </p>
                <p className="text-green-200/70 text-sm">
                  –ò–≥—Ä–æ–∫–∏ –≤–∏–¥—è—Ç –¥–∏–∞–ø–∞–∑–æ–Ω {minRange}-{maxRange} –∏ –ø—ã—Ç–∞—é—Ç—Å—è —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ
                </p>
              </div>

              {/* –õ–æ–≥ –∏–≥—Ä—ã */}
              {gameLog.length > 0 && (
                <div className="bg-gray-800/20 rounded-lg p-3 border border-emerald-700/20 max-h-32 overflow-y-auto">
                  <div className="text-xs text-green-200/60 font-semibold mb-2">
                    –•–æ–¥ –∏–≥—Ä—ã:
                  </div>
                  <div className="space-y-1 text-xs">
                    {gameLog.map((log, index) => (
                      <div key={index} className="text-green-200/80">
                        {log}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ */}
              <div className="grid grid-cols-2 gap-3">
                <button
                  onClick={() => {
                    addToLog(`üí• –í–µ–¥—É—â–∏–π –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ`);
                    setGameState('result');
                    onFuelEarned?.(0, false);
                  }}
                  className="py-3 bg-red-600 text-white font-bold rounded-lg hover:bg-red-500 transition-colors"
                >
                  ‚èπÔ∏è –ó–ê–í–ï–†–®–ò–¢–¨
                </button>
                <button
                  onClick={resetGame}
                  className="py-3 bg-gray-700 text-green-300 font-bold rounded-lg hover:bg-gray-600 transition-colors"
                >
                  üîÑ –ó–ê–ù–û–í–û
                </button>
              </div>
            </div>
          )}

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
          {gameState === 'result' && (
            <div className="text-center space-y-4">
              <div className="text-6xl mb-4">
                {gameLog.some(log => log.includes('–£–ì–ê–î–ê–õ')) ? 'üéâ' : 'üí•'}
              </div>

              <h3 className="text-xl font-bold text-green-300">
                {gameLog.some(log => log.includes('–£–ì–ê–î–ê–õ'))
                  ? '–ò–ì–†–û–ö –í–´–ò–ì–†–ê–õ!'
                  : '–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê'}
              </h3>

              <div className="bg-gray-800/30 rounded-lg p-4 border border-emerald-700/30">
                <div className="space-y-2 text-sm">
                  {gameLog.slice(-4).map((log, index) => (
                    <div key={index} className="text-green-200">
                      {log}
                    </div>
                  ))}
                </div>
              </div>

              <div className="grid grid-cols-2 gap-3">
                <button
                  onClick={resetGame}
                  className="py-3 bg-gradient-to-r from-emerald-500 to-green-500 text-gray-900 font-bold rounded-lg hover:from-emerald-400 hover:to-green-400 transition-all"
                >
                  üéÆ –ù–û–í–ê–Ø –ò–ì–†–ê
                </button>
                <button
                  onClick={onClose}
                  className="py-3 bg-gray-700 text-green-300 font-bold rounded-lg hover:bg-gray-600 transition-colors"
                >
                  ‚úÖ –ó–ê–ö–†–´–¢–¨
                </button>
              </div>
            </div>
          )}
        </div>

        {/* –§—É—Ç–µ—Ä */}
        <div className="bg-gray-800/50 p-3 border-t border-emerald-500/20">
          <p className="text-center text-xs text-green-200/50">
            üîí –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –≤–∏–¥–∏—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ. –®–∞–Ω—Å —É–≥–∞–¥–∞—Ç—å –æ—á–µ–Ω—å –º–∞–ª!
          </p>
        </div>
      </div>
    </div>
  );
}